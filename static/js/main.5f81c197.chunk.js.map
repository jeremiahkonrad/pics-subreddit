{"version":3,"sources":["components/image-detail/image-detail.js","App.js","constants.js","serviceWorker.js","index.js"],"names":["imageDetailStyles","css","imageStyles","frameStyles","ImageDetail","image","src","url","title","author","Header","Layout","Content","App","useState","initLoading","setInitLoading","isLoading","setIsLoading","pics","setPics","lastSeenHash","setLastSeenHash","fetchedData","setFetchedData","selectedImage","setSelectedImage","currentFilter","setCurrentFilter","useEffect","fetch","then","response","json","data","children","after","loadMore","style","textAlign","marginTop","height","lineHeight","onClick","concat","Array","map","loading","thumbnail","length","fetchedPics","latestData","className","span","md","push","pull","placeholder","onChange","e","target","value","itemLayout","dataSource","filter","elem","toLowerCase","includes","renderItem","item","Item","handleImageClick","avatar","active","Meta","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"g7DAIA,IAAMA,EAAoBC,YAAH,KAmBjBC,EAAcD,YAAH,KA0BXE,EAAcF,YAAH,KAwCFG,EAxDK,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACrB,OACE,mBAAKJ,IAAKD,GACR,mBAAKC,IAAKE,GACPE,GAAS,mBAAKJ,IAAKC,EAAaI,IAAG,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAOE,OAE/C,uBAAU,OAALF,QAAK,IAALA,OAAA,EAAAA,EAAOG,QAAS,qBACrB,4BAAIH,QAAJ,IAAIA,OAAJ,EAAIA,EAAOI,U,urBC7BTC,EAAoBC,IAApBD,OAAQE,EAAYD,IAAZC,QAiKDC,EA/JH,WAAO,IAAD,EACsBC,oBAAS,GAD/B,mBACTC,EADS,KACIC,EADJ,OAEkBF,oBAAS,GAF3B,mBAETG,EAFS,KAEEC,EAFF,OAGQJ,mBAAS,IAHjB,mBAGTK,EAHS,KAGHC,EAHG,OAIwBN,mBAAS,IAJjC,mBAITO,EAJS,KAIKC,EAJL,OAKsBR,mBAAS,IAL/B,mBAKTS,EALS,KAKIC,EALJ,OAM0BV,mBAAS,MANnC,mBAMTW,EANS,KAMMC,EANN,OAO0BZ,mBAAS,MAPnC,mBAOTa,EAPS,KAOMC,EAPN,KAWhBC,qBAAU,WACRd,GACEe,MAAM,GAAD,OC1B8B,sCD0B9B,yBAJgB,KAKlBC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACE,GACL,IAAMC,GAAW,OAAJD,QAAI,IAAJA,OAAA,EAAAA,EAAMC,OAAQ,GAC3BlB,GAAe,GACfI,EAAO,OAACc,QAAD,IAACA,OAAD,EAACA,EAAMC,UACdX,EAAc,OAACU,QAAD,IAACA,OAAD,EAACA,EAAMC,UAErBb,EAAe,OAACY,QAAD,IAACA,OAAD,EAACA,EAAME,YAE3B,CAACrB,IAEJ,IAiCMsB,EACHtB,GAAgBE,EAWb,KAVF,mBACEqB,MAAO,CACLC,UAAW,SACXC,UAAW,GACXC,OAAQ,GACRC,WAAY,SAGd,YAAC,IAAD,CAAQC,QA3CK,WACjBzB,GAAa,GACbE,EAGED,EAAKyB,OACH,YAAI,IAAIC,MAxBW,KAwBcC,KAAI,iBAAO,CAC1CC,SAAS,EACTb,KAAM,CACJ1B,MAAO,GACPwC,UAAW,UAMnBlB,MAAM,GAAD,OCxDgC,sCDwDhC,yBAlCkB,GAkClB,kBACoET,EADpE,kBAC0FF,EAAK8B,SAEjGlB,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACE,GAAU,IAAD,IACRiB,GAAkB,OAAJjB,QAAI,IAAJA,GAAA,UAAAA,EAAMC,YAAN,eAAYC,WAAY,GACtCgB,EAAU,sBAAO5B,GAAP,YAAuB2B,IAEvC1B,EAAe2B,GACf/B,EAAQ+B,GACR7B,EAAe,OAACW,QAAD,IAACA,GAAD,UAACA,EAAMC,YAAP,aAAC,EAAYE,OAC5BlB,GAAa,QAcb,iBAMN,OACE,mBAAKkC,UAAU,OACb,YAAC1C,EAAD,CACET,IAAKA,YAAF,MAOH,kBACEA,IAAKA,YAAF,MADL,UAQF,YAACW,EAAD,KACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAKyC,KAAM,GAAIC,GAAI,CAAED,KAAM,GAAIE,KAAM,KACnC,mBACEtD,IAAKA,YAAF,MAKH,YAAC,EAAD,CAAaI,MAAOoB,MAGxB,YAAC,IAAD,CAAK4B,KAAM,GAAIC,GAAI,CAAED,KAAM,GAAIG,KAAM,KACnC,YAAC,IAAD,CACEC,YAAW,yBAAoBtC,EAAK8B,OAAzB,KACXS,SAAU,SAACC,GAAD,OAAO/B,EAAiB+B,EAAEC,OAAOC,UAE7C,YAAC,IAAD,CACE5D,IAAKA,YAAF,KAGH6D,WAAW,aACXC,WACEpC,EACIR,EAAK6C,QAAO,SAACC,GAAU,IAAD,EACpB,cAAOA,QAAP,IAAOA,GAAP,UAAOA,EAAM/B,YAAb,aAAO,EAAY1B,MAChB0D,cACAC,SAASxC,MAEdR,EAENkB,SAAUA,EACV+B,WAAY,SAACC,GAAU,IAAD,SACSA,QADT,IACSA,OADT,EACSA,EAAMnC,KAA3Bc,EADY,EACZA,UAAWxC,EADC,EACDA,MACnB,OACE,YAAC,IAAK8D,KAAN,CACE3B,QAAS,YAxDF,SAAC0B,GAAS3C,EAAiB2C,GAyDhCE,CAAiBF,EAAKnC,OAExBjC,IAAKA,YAAF,MAIH,YAAC,IAAD,CACEuE,QAAM,EACNhE,OAAO,EACPuC,QAASsB,EAAKtB,QACd0B,QAAM,GAEN,YAAC,IAAKH,KAAKI,KAAX,CACEF,OAAQ,YAAC,IAAD,CAAQlE,IAAK0C,IACrBxC,MAAOA,cElJXmE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxD,MAAK,SAAAyD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5f81c197.chunk.js","sourcesContent":["/** @jsx jsx */\nimport React from 'react';\nimport { css, jsx } from '@emotion/core';\n\nconst imageDetailStyles = css`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n\n  @media (min-width: 768px) {\n    max-height: none;\n  }\n\n  h1 {\n    font-family: 'Times New Roman', Serif;\n    font-size: 2.5rem;\n    font-weight: bold;\n    line-height: 100%;\n    margin: 0 0 1rem;\n  }\n`;\n\nconst imageStyles = css`\n  border: solid 2px;\n  border-bottom-color: #ffe;\n  border-left-color: #eed;\n  border-right-color: #eed;\n  border-top-color: #ccb;\n  max-height: 100%;\n  max-width: 100%;\n`;\n\nconst ImageDetail = ({ image }) => {\n  return (\n    <div css={imageDetailStyles}>\n      <div css={frameStyles}>\n        {image && <img css={imageStyles} src={image?.url} />}\n      </div>\n      <h1>{image?.title || '[select an image]'}</h1>\n      <p>{image?.author}</p>\n    </div>\n  );\n};\n\n/**\n * Original frame style from here: https://codepen.io/chris22smith/pen/PbBwjp\n * Edited to fit use case better\n */\nconst frameStyles = css`\n  background-color: #ddc;\n  border: solid 5vmin #eee;\n  border-bottom-color: #fff;\n  border-left-color: #eee;\n  border-radius: 2px;\n  border-right-color: #eee;\n  border-top-color: #ddd;\n  box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.25) inset,\n    0 5px 10px 5px rgba(0, 0, 0, 0.25);\n  box-sizing: border-box;\n  display: inline-block;\n  margin: 10vh 10vw 5vh;\n  // height: 80vh;\n  padding: 8vmin;\n  position: relative;\n  text-align: center;\n  &:before {\n    border-radius: 2px;\n    bottom: -2vmin;\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.25) inset;\n    content: '';\n    left: -2vmin;\n    position: absolute;\n    right: -2vmin;\n    top: -2vmin;\n  }\n  &:after {\n    border-radius: 2px;\n    bottom: -2.5vmin;\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.25);\n    content: '';\n    left: -2.5vmin;\n    position: absolute;\n    right: -2.5vmin;\n    top: -2.5vmin;\n  }\n  max-width: 400px;\n`;\n\nexport default ImageDetail;\n","/** @jsx jsx */\n// ^ enables emotion `css` syntax to be used\nimport { useEffect, useState } from 'react';\nimport { Layout, Row, Col, List, Avatar, Button, Skeleton, Input } from 'antd';\nimport { css, jsx } from '@emotion/core';\nimport ImageDetail from './components/image-detail/image-detail';\nimport { REDDIT_PICS_BASE_ENDPOINT } from './constants';\n\nimport 'antd/dist/antd.css';\nimport './App.css';\n\nconst { Header, Content } = Layout;\n\nconst App = () => {\n  const [initLoading, setInitLoading] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [pics, setPics] = useState([]);\n  const [lastSeenHash, setLastSeenHash] = useState('');\n  const [fetchedData, setFetchedData] = useState([]);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [currentFilter, setCurrentFilter] = useState(null);\n\n  const ITEM_FETCH_LIMIT = 10;\n\n  useEffect(() => {\n    initLoading &&\n      fetch(`${REDDIT_PICS_BASE_ENDPOINT}?jsonp=&limit=${ITEM_FETCH_LIMIT}`)\n        .then((response) => {\n          return response.json();\n        })\n        .then((json) => {\n          const data = json?.data || {};\n          setInitLoading(false);\n          setPics(data?.children);\n          setFetchedData(data?.children);\n          // reddit api passes us a value to help keep track of the next page of items\n          setLastSeenHash(data?.after);\n        });\n  }, [initLoading]);\n\n  const onLoadMore = () => {\n    setIsLoading(true);\n    setPics(\n      // prefill the acting array of pics with the expected return items, stubbing expected data\n      // these expectant data items will be rendered in a Skeleton state, by ANT design\n      pics.concat(\n        [...new Array(ITEM_FETCH_LIMIT)].map(() => ({\n          loading: true,\n          data: {\n            title: '',\n            thumbnail: '',\n          },\n        }))\n      )\n    );\n\n    fetch(\n      `${REDDIT_PICS_BASE_ENDPOINT}?jsonp=&limit=${ITEM_FETCH_LIMIT}&after=${lastSeenHash}&count=${pics.length}`\n    )\n      .then((response) => {\n        return response.json();\n      })\n      .then((json) => {\n        const fetchedPics = json?.data?.children || [];\n        const latestData = [...fetchedData, ...fetchedPics];\n\n        setFetchedData(latestData);\n        setPics(latestData);\n        setLastSeenHash(json?.data?.after);\n        setIsLoading(false);\n      });\n  };\n\n  const loadMore =\n    !initLoading && !isLoading ? (\n      <div\n        style={{\n          textAlign: 'center',\n          marginTop: 12,\n          height: 32,\n          lineHeight: '32px',\n        }}\n      >\n        <Button onClick={onLoadMore}>loading more</Button>\n      </div>\n    ) : null;\n\n  const handleImageClick = (item) => setSelectedImage(item);\n\n  return (\n    <div className=\"App\">\n      <Header\n        css={css`\n          top: 0;\n          position: sticky;\n          z-index: 1;\n          width: 100%;\n        `}\n      >\n        <h2\n          css={css`\n            color: white;\n          `}\n        >\n          /pics\n        </h2>\n      </Header>\n      <Content>\n        <Row>\n          <Col span={24} md={{ span: 12, push: 12 }}>\n            <div\n              css={css`\n                position: sticky;\n                top: 64px;\n              `}\n            >\n              <ImageDetail image={selectedImage} />\n            </div>\n          </Col>\n          <Col span={24} md={{ span: 12, pull: 12 }}>\n            <Input\n              placeholder={`filter titles (${pics.length})`}\n              onChange={(e) => setCurrentFilter(e.target.value)}\n            />\n            <List\n              css={css`\n                margin: 1rem;\n              `}\n              itemLayout=\"horizontal\"\n              dataSource={\n                currentFilter\n                  ? pics.filter((elem) => {\n                      return elem?.data?.title\n                        .toLowerCase()\n                        .includes(currentFilter);\n                    })\n                  : pics\n              }\n              loadMore={loadMore}\n              renderItem={(item) => {\n                const { thumbnail, title } = item?.data; // we have url too\n                return (\n                  <List.Item\n                    onClick={() => {\n                      handleImageClick(item.data);\n                    }}\n                    css={css`\n                      cursor: pointer;\n                    `}\n                  >\n                    <Skeleton\n                      avatar\n                      title={false}\n                      loading={item.loading}\n                      active\n                    >\n                      <List.Item.Meta\n                        avatar={<Avatar src={thumbnail} />}\n                        title={title}\n                      />\n                    </Skeleton>\n                  </List.Item>\n                );\n              }}\n            />\n          </Col>\n        </Row>\n      </Content>\n    </div>\n  );\n};\n\nexport default App;\n","export const REDDIT_PICS_BASE_ENDPOINT = 'https://www.reddit.com/r/pics/.json';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}